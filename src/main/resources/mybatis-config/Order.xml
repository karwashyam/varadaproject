<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webapp.daos.OrderDao">
	
	
	
	<resultMap id="fnFMap" type="Map" >
		<result property="user_id" column="user_id" />
		<result property="user_name" column="user_name" />
		<result property="user_full_name" column="user_full_name" />
		<result property="user_city" column="user_city" />
		<result property="email" column="email" />
		<result property="saree" column="saree" />
		<result property="gown" column="gown" />
		<result property="kurti" column="kurti" />
		<result property="price_range" column="price_range" />
		<result property="product_type_id" column="product_type_id" />
		<result property="count" column="count" />
		<result property="lehenga" column="lehenga" />
		<result property="dress_material" column="dress_material" />
		<result property="catalogue_delivery" column="catalogue_delivery" />
		<result property="update_frequency" column="update_frequency" />
		<result property="product_type_name" column="product_type_name" />
		<result property="product_id" column="product_id" />
		<result property="product_type" column="product_type" />
		<result property="product_price" column="product_price" />
		<result property="product_image" column="product_image" />
		<result property="price" column="price" />
		<result property="quantity" column="quantity" />
		<result property="weight" column="weight" />
		<result property="phone" column="phone" />
	</resultMap>
	
	<select id="fetchSubOrder" parameterType="JQTableUtils" resultType="SubOrderJsonDto">
		SELECT order_product_id, op.product_id, order_id, price, discounted_price, 
       		op.weight,product_type_name
		 FROM order_products op
		 INNER JOIN products o ON o.product_id=op.product_id
		 LEFT JOIN product_type pt ON pt.product_type_id=o.product_type
  		WHERE op.order_id=#{order_id}
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(op.order_product_id as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			op.product_id ilike #{JQTableUtils.searchParams}
			OR
			cast(op.price as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			cast(op.discounted_price as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			cast(op.weight as character varying(50)) ilike #{JQTableUtils.searchParams}
			)
		</if>
		ORDER BY
		<choose>
			<when test="JQTableUtils.sortColumn == 0">
				op.order_product_id
			</when>
			<when test="JQTableUtils.sortColumn == 1">
				op.product_id
			</when>
			<when test="JQTableUtils.sortColumn == 2">
				op.price
			</when>
			<when test="JQTableUtils.sortColumn == 3">
				op.discounted_price
			</when>
			<when test="JQTableUtils.sortColumn == 4">
				op.weight
			</when>
			<otherwise>
				op.order_product_id
			</otherwise>
		</choose>
		<choose>
			<when test="JQTableUtils.sortingDirection == 'asc'">
				ASC
			</when>
			<otherwise>
				DESC
			</otherwise>
		</choose> 

		<if test="JQTableUtils.iDisplayLength!=-1">
			LIMIT #{JQTableUtils.iDisplayLength}
			OFFSET #{JQTableUtils.iDisplayStart}
		</if>
		
	</select>
	
	<select id="fetchSubTotalOrders" parameterType="JQTableUtils" resultType="long">
		SELECT count(*)
  		FROM order_products
  		WHERE order_id=#{order_id}
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(order_product_id as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			product_id ilike #{JQTableUtils.searchParams}
			OR
			cast(price as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			cast(discounted_price as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			cast(weight as character varying(50)) ilike #{JQTableUtils.searchParams}
			)
		</if>

		
	</select>
	
	<select id="fetchOrders" parameterType="JQTableUtils" resultType="OrderJsonDto">
		SELECT orders.order_id, orders.user_id as user_id, order_status, total, orders.created_at as created_at,
			user_full_name,email,users.phone as phone ,string_agg(product_id , ', ') as product_id,orders.payment_method,
			orders.courier_method
  		FROM orders
  		INNER JOIN users ON users.user_id=orders.user_id
  		LEFT JOIN order_products op ON op.order_id=orders.order_id
  		WHERE orders.record_status='A' AND active=false
  		<if test="userId != null">
			AND
			orders.user_id = #{userId}
		</if>
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(orders.order_id as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			orders.user_id ilike #{JQTableUtils.searchParams}
			OR
			order_status ilike #{JQTableUtils.searchParams}
			OR
			cast(total as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			user_full_name ilike #{JQTableUtils.searchParams}
			OR
			email ilike #{JQTableUtils.searchParams}
			OR
			users.phone ilike #{JQTableUtils.searchParams}
			OR
			product_id ilike #{JQTableUtils.searchParams}
			OR
			payment_method ilike #{JQTableUtils.searchParams}
			OR
			courier_method ilike #{JQTableUtils.searchParams}
			)
		</if>
		GROUP BY 
			orders.order_id,user_full_name,email,users.phone
		ORDER BY
		<choose>
			<when test="JQTableUtils.sortColumn == 1">
				orders.order_id
			</when>
			<when test="JQTableUtils.sortColumn == 2">
				orders.user_id
			</when>
			<when test="JQTableUtils.sortColumn == 3">
				lower(user_full_name)
			</when>
			<when test="JQTableUtils.sortColumn == 4">
				users.phone
			</when>
			<when test="JQTableUtils.sortColumn == 5">
				email
			</when>
			<when test="JQTableUtils.sortColumn == 7">
				total
			</when>
			<when test="JQTableUtils.sortColumn == 8">
				orders.created_at
			</when>
			<when test="JQTableUtils.sortColumn == 9">
				payment_status
			</when>
			<when test="JQTableUtils.sortColumn == 10">
				courier_status
			</when>
			<when test="JQTableUtils.sortColumn == 11">
				order_status
			</when>
			<otherwise>
				orders.created_at
			</otherwise>
		</choose>
		<choose>
			<when test="JQTableUtils.sortingDirection == 'asc'">
				DESC
			</when>
			<otherwise>
				ASC
			</otherwise>
		</choose> 

		<if test="JQTableUtils.iDisplayLength!=-1">
			LIMIT #{JQTableUtils.iDisplayLength}
			OFFSET #{JQTableUtils.iDisplayStart}
		</if>
		
	</select>
	
	<select id="fetchIncompleteOrders" parameterType="JQTableUtils" resultType="OrderJsonDto">
		SELECT orders.order_id, orders.user_id as user_id, order_status, total, orders.created_at as created_at,
			user_full_name,email,users.phone as phone ,string_agg(product_id , ', ') as product_id
  		FROM orders
  		INNER JOIN users ON users.user_id=orders.user_id
  		LEFT JOIN order_products op ON op.order_id=orders.order_id
  		WHERE (orders.record_status!='A' OR active=true)
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(orders.order_id as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			orders.user_id ilike #{JQTableUtils.searchParams}
			OR
			order_status ilike #{JQTableUtils.searchParams}
			OR
			cast(total as character varying(50)) ilike #{JQTableUtils.searchParams}
			OR
			user_full_name ilike #{JQTableUtils.searchParams}
			OR
			email ilike #{JQTableUtils.searchParams}
			OR
			users.phone ilike #{JQTableUtils.searchParams}
			OR
			product_id ilike #{JQTableUtils.searchParams}
			)
		</if>
		GROUP BY 
			orders.order_id,user_full_name,email,users.phone
		ORDER BY
		<choose>
			<when test="JQTableUtils.sortColumn == 0">
				orders.order_id
			</when>
			<when test="JQTableUtils.sortColumn == 1">
				orders.user_id
			</when>
			<when test="JQTableUtils.sortColumn == 2">
				lower(user_full_name)
			</when>
			<when test="JQTableUtils.sortColumn == 3">
				users.phone
			</when>
			<when test="JQTableUtils.sortColumn == 4">
				email
			</when>
			<when test="JQTableUtils.sortColumn == 6">
				total
			</when>
			<when test="JQTableUtils.sortColumn == 7">
				orders.created_at
			</when>
			<when test="JQTableUtils.sortColumn == 8">
				order_status
			</when>
			<otherwise>
				orders.created_at
			</otherwise>
		</choose>
		<choose>
			<when test="JQTableUtils.sortingDirection == 'asc'">
				DESC
			</when>
			<otherwise>
				ASC
			</otherwise>
		</choose> 

		<if test="JQTableUtils.iDisplayLength!=-1">
			LIMIT #{JQTableUtils.iDisplayLength}
			OFFSET #{JQTableUtils.iDisplayStart}
		</if>
		
	</select>
	
	<select id="fetchTotalOrders" parameterType="JQTableUtils" resultType="long">
		SELECT count(*)
  		FROM orders
  		INNER JOIN users ON users.user_id=orders.user_id
  		WHERE orders.record_status='A'  AND active=false
  		<if test="userId != null">
			AND
			orders.user_id = #{userId}
		</if>
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(order_id as char) ilike #{JQTableUtils.searchParams}
			OR
			orders.user_id ilike #{JQTableUtils.searchParams}
			OR
			order_status ilike #{JQTableUtils.searchParams}
			OR
			cast(total as char) ilike #{JQTableUtils.searchParams}
			OR
			user_full_name ilike #{JQTableUtils.searchParams}
			OR
			email ilike #{JQTableUtils.searchParams}
			OR
			users.phone ilike #{JQTableUtils.searchParams}
			)

		</if>
		
		
	</select>
	
	<select id="fetchIncompleteTotalOrders" parameterType="JQTableUtils" resultType="long">
		SELECT count(*)
  		FROM orders
  		INNER JOIN users ON users.user_id=orders.user_id
  		WHERE (orders.record_status!='A' OR active=true)
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(cast(order_id as char) ilike #{JQTableUtils.searchParams}
			OR
			orders.user_id ilike #{JQTableUtils.searchParams}
			OR
			order_status ilike #{JQTableUtils.searchParams}
			OR
			cast(total as char) ilike #{JQTableUtils.searchParams}
			OR
			user_full_name ilike #{JQTableUtils.searchParams}
			OR
			email ilike #{JQTableUtils.searchParams}
			OR
			users.phone ilike #{JQTableUtils.searchParams}
			)

		</if>
		
		
	</select>
	
	<select id="fetchOrderDetails" parameterType="int" resultType="OrderModel">
		SELECT  order_id, orders.user_id as user_id,address,orders.phone as delivery_phone, order_status, transaction_id,
        	total, orders.created_at as created_at,user_full_name,email,users.phone as phone,total_price,total_discounted_price,
        	total_courier,order_note,coupon_id,coupon_discount,referral_wallet_discount,adjustment_amount,adjustment_note,
        	customer_note,courier_method,payment_method ,internet_handling_charge ,online_payment ,cod_payment ,cod_charge 
  		FROM orders 
  		INNER JOIN users ON users.user_id=orders.user_id
  		WHERE orders.record_status='A' AND orders.order_id=#{order_id} 
	</select>
	
	<select id="fetchSubOrderDetails" parameterType="int" resultType="SubOrderModel">
		SELECT order_product_id, product_id, order_id, price, discounted_price, 
       		weight
  		FROM order_products
  		WHERE order_product_id=#{sub_order_id}
  	</select>
  	
  	<select id="fetchSubOrderDetailsList" parameterType="int" resultType="SubOrderModel">
		SELECT order_product_id, product_id, order_id, price, discounted_price, 
       		weight
  		FROM order_products
  		WHERE order_id=#{order_id}
  	</select>
  	
  	<select id="getFirstBuyDetails" parameterType="String" resultType="String">
		SELECT  referrer_coupon
  		FROM users
  		WHERE user_id=#{user_id} AND first_buy=true And record_status='A'
  	</select>
  	
  	<update id="addReferralBonus" parameterType="OrderModel">
		UPDATE users SET referral_balance=referral_balance+
			(select amount from referral_balance_history where user_id=#{user_id} AND user_used=#{referrer_coupon})
		WHERE user_id=#{referrer_coupon} AND record_status='A'
  	</update>
  	
  	<update id="updateFirstBuy" parameterType="OrderModel">
		UPDATE users SET first_buy=false
		WHERE user_id=#{user_id} AND record_status='A'
  	</update>
  	
  	<insert id="addOrder" parameterType="OrderModel">
		INSERT INTO orders(
            user_id, address, phone, order_status, active, 
            record_status, created_at, updated_at, order_note)
    	VALUES ( #{user_id}, #{address}, #{delivery_phone}, #{order_status},false,
            'Z', #{created_at}, #{created_at}, #{order_note});
  	</insert>
  	
  	<select id="getOrderId" parameterType="String" resultType="int">
		SELECT order_id
		FROM orders
		Where user_id=#{user_id} AND record_status='Z'
		ORDER BY created_at Desc
		LIMIT 1
  	</select>
  	
  	<select id="getOrderPrice" resultType="map">
 		SELECT o.order_id,sum(price) as total_price, sum(discounted_price) as total_discounted_price, 
       			sum(weight) as total_weight,o.coupon_id
  		FROM order_products op
  		INNER JOIN orders o ON o.order_id=op.order_id 
  		WHERE o.order_id=#{orderId}
 		GROUP BY o.order_id
 		ORDER BY created_at DESC
 		LIMIT 1
	</select>
  	
  	<update id="updateOrders" parameterType="OrderModel">
		UPDATE orders
   		SET address=#{orderModel.address}, phone=#{orderModel.delivery_phone}, order_status=#{orderModel.order_status},  
       		total_courier=#{orderModel.total_courier},adjustment_note=#{orderModel.adjustment_note},adjustment_amount=#{orderModel.adjustment_amount},
       		total=total-total_courier-adjustment_amount+#{orderModel.total_courier}+#{orderModel.adjustment_amount}, updated_at=#{updated_at},order_note=#{orderModel.order_note}
       		<if test="orderModel.customer_note_new != null">
       		,customer_note=#{orderModel.customer_note_new}
       		</if>
  		WHERE order_id=#{orderModel.order_id}
  	</update>
  	
  	<update id="updateSubOrders" parameterType="SubOrderModel">
		UPDATE public.order_products
   		SET product_id=#{subOrderModel.product_id}, price=#{subOrderModel.price}, discounted_price=#{subOrderModel.discounted_price}, 
      	 	weight=#{subOrderModel.weight}
  		WHERE order_product_id=#{subOrderModel.order_product_id}
  	</update>
  	

		<select id="getOrderDetailsOfUserForTimePeriod" parameterType="map" resultType="OrderModel">
			SELECT 
				orders.order_id, orders.amount, orders.created_at
			FROM 
				cumulative_discount_orders orders 
			WHERE 
				orders.record_status = 'A' 
			AND 
				orders.user_id = #{userId}
			AND
				orders.created_at >= #{prevDate}
			AND
				orders.created_at &lt;= #{orderDate}
			ORDER BY 
				orders.created_at ASC
		</select>
		
		<insert id="addCumulativeDiscountOrderHistory" parameterType="OrderModel" useGeneratedKeys="false">
			INSERT INTO 
				cumulative_discount_orders
				(
				cumulative_discount_order_id, user_id, order_id, amount, created_at, updated_at, record_status
				)
			VALUES 
				(
				#{cumulativeDiscountOrderId}, #{user_id}, #{order_id}, #{amount}, #{created_at}, #{updatedAt}, #{recordStatus}
				)
		</insert>
		
		<update id="updateCumulativeDiscountOrderHistory" parameterType="OrderModel">
			UPDATE 
				cumulative_discount_orders
			SET
				record_status = 'D'
			WHERE
				user_id = #{user_id}
		</update>  	
		
		<select id="checkDiscountOrder" parameterType="OrderModel" resultType="boolean">
			Select 
				count(*)>0
			FROM
				cumulative_discount_orders
			WHERE
				user_id = #{user_id}
			AND
				order_id = #{order_id}
		</select>  	
		
		<insert id="insertOrderChangeHistory" parameterType="OrdersHistoryModel" useGeneratedKeys="false">
		INSERT INTO 
			orders_history
				(
            		order_history_id, order_id, changes_detail, created_at, created_by
            	)
    	VALUES 
    			(
    				#{orderHistoryId}, #{orderId}, #{changesDetail}, #{createdAt}, #{createdBy}
    			)
	</insert>
	
	<select id="getOrderActivityHistoryOfOrder" parameterType="JQTableUtils" resultType="OrdersHistoryModel">
		SELECT 
			ROW_NUMBER() OVER (ORDER BY order_history_id) srNo, order_history_id AS orderHistoryId, order_id AS orderId, changes_detail AS changesDetail, 
			created_at AS createdAt, created_by AS createdBy
  		FROM 
  			orders_history
  		WHERE
  			order_id = #{orderId}
  		<if test="JQTableUtils.searchParams!=''">
			AND
			(
				changes_detail ilike #{JQTableUtils.searchParams}
			)
		</if>
		ORDER BY
		<choose>
			<when test="JQTableUtils.sortColumn == 0">
				srNo
			</when>
			<when test="JQTableUtils.sortColumn == 1">
				changes_detail
			</when>
			<when test="JQTableUtils.sortColumn == 2">
				created_at
			</when>
		</choose>
		<choose>
			<when test="JQTableUtils.sortingDirection == 'asc'">
				ASC
			</when>
			<otherwise>
				DESC
			</otherwise>
		</choose>
		<if test="JQTableUtils.iDisplayLength!=-1">
			LIMIT #{JQTableUtils.iDisplayLength}
			OFFSET #{JQTableUtils.iDisplayStart}
		</if>
	</select>
	
	<select id="fetchOrdersListByStatus" parameterType="String" resultType="OrderModel">
		SELECT 
			order_id, orders.user_id as user_id, address, orders.phone as delivery_phone, order_status, transaction_id,
        	<!-- total, orders.created_at as created_at, user_full_name, email, users.phone as phone, total_price, total_discounted_price,
        	total_courier, order_note, coupon_id, coupon_discount, referral_wallet_discount, adjustment_amount, adjustment_note,
        	customer_note, courier_method, payment_method, internet_handling_charge, online_payment, cod_payment, cod_charge, -->
        	orders.updated_at as updated_at
  		FROM 
  			orders 
  		INNER JOIN 
  			users ON users.user_id = orders.user_id
  		WHERE 
  			orders.record_status = 'A' 
  		AND 
  			orders.order_status = #{orderStatus}
	</select>
	
	<update id="updateOrderStatus" parameterType="OrderModel">
		<!-- <foreach collection="orderModelsList" item="orderModel" index="index" separator=";"> -->
		
		<foreach collection="orderModelsList" item="barPhotoId" separator=";">
			UPDATE
				orders
	   		SET
	   			order_status = #{barPhotoId.phone}, updated_at = #{barPhotoId.updated_at}
	  		WHERE
	  			order_id = #{barPhotoId.order_id}
  		</foreach>
  	</update>
  	
  	<update id="disableCouponForUser">
		INSERT INTO coupons_disabled(
            coupons_disabled_id, user_id, order_id, coupon_id)
    	VALUES (#{coupons_disabled_id}, #{user_id}, #{order_id}, #{coupon_id});
  	</update>
</mapper>	